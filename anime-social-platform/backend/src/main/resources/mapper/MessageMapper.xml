<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.animesocial.platform.repository.MessageRepository">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.animesocial.platform.model.Message">
        <id column="id" property="id" />
        <result column="sender_id" property="senderId" />
        <result column="receiver_id" property="receiverId" />
        <result column="content" property="content" />
        <result column="send_time" property="sendTime" />
        <result column="read_status" property="readStatus" />
    </resultMap>
    
    <!-- 带发送者和接收者信息的结果映射 -->
    <resultMap id="MessageWithUserMap" type="com.animesocial.platform.model.Message" extends="BaseResultMap">
        <association property="sender" javaType="com.animesocial.platform.model.User">
            <id column="sender_user_id" property="id" />
            <result column="sender_username" property="username" />
            <result column="sender_avatar" property="avatar" />
        </association>
        <association property="receiver" javaType="com.animesocial.platform.model.User">
            <id column="receiver_user_id" property="id" />
            <result column="receiver_username" property="username" />
            <result column="receiver_avatar" property="avatar" />
        </association>
    </resultMap>
    
    <!-- 插入消息 -->
    <insert id="insertMessage" parameterType="com.animesocial.platform.model.Message" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO messages(sender_id, receiver_id, content, send_time, read_status)
        VALUES(#{senderId}, #{receiverId}, #{content}, #{sendTime}, #{readStatus})
    </insert>
    
    <!-- 根据ID获取消息 -->
    <select id="getMessageById" resultMap="BaseResultMap">
        SELECT * FROM messages WHERE id = #{id}
    </select>
    
    <!-- 获取用户的收件箱消息 -->
    <select id="getInboxMessages" resultMap="MessageWithUserMap">
        SELECT m.*, 
               s.id as sender_user_id, s.username as sender_username, s.avatar as sender_avatar,
               r.id as receiver_user_id, r.username as receiver_username, r.avatar as receiver_avatar
        FROM messages m
        LEFT JOIN users s ON m.sender_id = s.id
        LEFT JOIN users r ON m.receiver_id = r.id
        WHERE m.receiver_id = #{userId}
        ORDER BY m.send_time DESC
        LIMIT #{offset}, #{limit}
    </select>
    
    <!-- 获取用户的发件箱消息 -->
    <select id="getOutboxMessages" resultMap="MessageWithUserMap">
        SELECT m.*, 
               s.id as sender_user_id, s.username as sender_username, s.avatar as sender_avatar,
               r.id as receiver_user_id, r.username as receiver_username, r.avatar as receiver_avatar
        FROM messages m
        LEFT JOIN users s ON m.sender_id = s.id
        LEFT JOIN users r ON m.receiver_id = r.id
        WHERE m.sender_id = #{userId}
        ORDER BY m.send_time DESC
        LIMIT #{offset}, #{limit}
    </select>
    
    <!-- 获取两个用户之间的聊天记录 -->
    <select id="getChatHistory" resultMap="MessageWithUserMap">
        SELECT m.*, 
               s.id as sender_user_id, s.username as sender_username, s.avatar as sender_avatar,
               r.id as receiver_user_id, r.username as receiver_username, r.avatar as receiver_avatar
        FROM messages m
        LEFT JOIN users s ON m.sender_id = s.id
        LEFT JOIN users r ON m.receiver_id = r.id
        WHERE (m.sender_id = #{userId} AND m.receiver_id = #{friendId})
           OR (m.sender_id = #{friendId} AND m.receiver_id = #{userId})
        ORDER BY m.send_time DESC
        LIMIT #{offset}, #{limit}
    </select>
    
    <!-- 标记消息为已读 -->
    <update id="markMessageAsRead">
        UPDATE messages SET read_status = 1
        WHERE id = #{messageId}
    </update>
    
    <!-- 批量标记消息为已读 -->
    <update id="batchMarkAsRead">
        UPDATE messages SET read_status = 1
        WHERE receiver_id = #{receiverId}
        <if test="senderId != null">
            AND sender_id = #{senderId}
        </if>
        AND read_status = 0
    </update>
    
    <!-- 删除消息 -->
    <delete id="deleteMessage">
        DELETE FROM messages WHERE id = #{messageId}
    </delete>
    
    <!-- 获取用户未读消息数量 -->
    <select id="getUnreadCount" resultType="int">
        SELECT COUNT(*) FROM messages
        WHERE receiver_id = #{userId} AND read_status = 0
    </select>
    
    <!-- 获取来自特定发送者的未读消息数量 -->
    <select id="getUnreadCountFromSender" resultType="int">
        SELECT COUNT(*) FROM messages
        WHERE receiver_id = #{receiverId} AND sender_id = #{senderId} AND read_status = 0
    </select>
    
    <!-- 获取与用户有聊天记录的好友最新消息 -->
    <select id="getLatestMessagesWithUsers" resultMap="MessageWithUserMap">
        SELECT m.*, 
               s.id as sender_user_id, s.username as sender_username, s.avatar as sender_avatar,
               r.id as receiver_user_id, r.username as receiver_username, r.avatar as receiver_avatar
        FROM (
            SELECT 
                CASE 
                    WHEN sender_id = #{userId} THEN receiver_id
                    ELSE sender_id
                END as friend_id,
                MAX(id) as max_message_id
            FROM messages
            WHERE sender_id = #{userId} OR receiver_id = #{userId}
            GROUP BY friend_id
        ) latest
        JOIN messages m ON m.id = latest.max_message_id
        LEFT JOIN users s ON m.sender_id = s.id
        LEFT JOIN users r ON m.receiver_id = r.id
        ORDER BY m.send_time DESC
    </select>
</mapper> 